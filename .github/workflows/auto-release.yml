name: 版本更新

on:
  push:
    tags:
      - 'v*'  # 匹配所有以v开头的标签，例如v1.0.0

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 安装依赖
        run: npm install

      - name: 获取项目版本号
        id: package_version
        run: |
          $version = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version
          echo "APP_VERSION=$version" >> $env:GITHUB_ENV
          echo "版本号: $version"

      - name: 构建应用程序
        run: npm run build:win

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-windows
          path: |
            dist/*.exe
          retention-days: 5

  upload-to-backend:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取项目版本号和更新信息
        id: get_info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "版本号: $VERSION"
          
          # 获取最新的提交信息作为更新内容
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          # 限制长度并处理特殊字符
          RELEASE_NOTES=$(echo "$COMMIT_MESSAGE" | head -c 100 | tr -d '"' | tr -d "'")
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          echo "更新信息: $RELEASE_NOTES"

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: electron-app-windows
          path: dist

      - name: 显示构建产物结构
        run: |
          ls -la dist/
          # 获取exe文件名
          EXE_FILE=$(find dist/ -name "*.exe" -type f | head -n 1)
          echo "EXE_FILE=$EXE_FILE" >> $GITHUB_ENV
          echo "找到的执行文件: $EXE_FILE"

      - name: 上传到后端服务器
        run: |
          if [ -z "${{ env.EXE_FILE }}" ]; then
            echo "错误: 未找到exe文件"
            exit 1
          fi
          
          echo "开始准备上传文件..."
          echo "原文件: ${{ env.EXE_FILE }}"
          
          # 检查文件大小
          file_size=$(stat -f%z "${{ env.EXE_FILE }}" 2>/dev/null || stat -c%s "${{ env.EXE_FILE }}")
          echo "文件大小: $file_size bytes ($(($file_size / 1024 / 1024)) MB)"
          
          # 如果文件大于100MB，进行压缩
          if [ $file_size -gt 104857600 ]; then
            echo "文件较大，正在压缩..."
            original_file="${{ env.EXE_FILE }}"
            compressed_file="${original_file}.gz"
            gzip -c "$original_file" > "$compressed_file"
            upload_file="$compressed_file"
            echo "压缩后文件: $upload_file"
            
            # 检查压缩后大小
            compressed_size=$(stat -f%z "$compressed_file" 2>/dev/null || stat -c%s "$compressed_file")
            echo "压缩后大小: $compressed_size bytes ($(($compressed_size / 1024 / 1024)) MB)"
          else
            upload_file="${{ env.EXE_FILE }}"
          fi
          
          echo "开始上传文件到后端服务器..."
          echo "服务器地址: ${{ vars.BACKEND_SERVER_URL }}"
          echo "版本号: ${{ env.APP_VERSION }}"
          echo "更新信息: ${{ env.RELEASE_NOTES }}"
          echo "上传文件: $upload_file"
          
          # 使用curl上传文件到后端接口，增加超时时间
          response=$(curl -s -w "%{http_code}" \
            --connect-timeout 30 \
            --max-time 600 \
            -X POST \
            -H "Authorization: ${{ secrets.BACKEND_AUTH_TOKEN }}" \
            -F "appFile=@$upload_file" \
            -F "app=0"\
            -F "version=${{ env.APP_VERSION }}" \
            -F "releaseNotes=${{ env.RELEASE_NOTES }}" \
            "${{ vars.BACKEND_SERVER_URL }}/api/version/upload")
          
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "HTTP状态码: $http_code"
          echo "响应内容: $response_body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "✅ 文件上传成功！"
          else
            echo "❌ 文件上传失败，HTTP状态码: $http_code"
            echo "响应内容: $response_body"
            
            # 如果是413错误，给出详细说明
            if [ "$http_code" -eq 413 ]; then
              echo ""
              echo "📋 413错误解决方案："
              echo "1. 检查nginx配置中的client_max_body_size设置"
              echo "2. 确保服务器支持大文件上传"
              echo "3. 文件大小: $(($file_size / 1024 / 1024)) MB"
            fi
            
            exit 1
          fi

  publish-release:
    needs: [build, upload-to-backend]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取项目版本号和发布信息
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "版本号: $VERSION"
          
          # 获取最新的提交信息作为更新内容
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          # 获取更详细的提交历史（自上个tag以来的变更）
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
          fi
          
          # 保存到文件以避免特殊字符问题
          echo "$CHANGELOG" > CHANGELOG.txt
          echo "更新日志已保存到 CHANGELOG.txt"

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: electron-app-windows
          path: dist

      - name: 显示构建产物结构和文件信息
        run: |
          ls -la dist/
          # 获取exe文件信息
          EXE_FILE=$(find dist/ -name "*.exe" -type f | head -n 1)
          if [ -n "$EXE_FILE" ]; then
            file_size=$(stat -c%s "$EXE_FILE" 2>/dev/null || stat -f%z "$EXE_FILE")
            file_size_mb=$(( file_size / 1024 / 1024 ))
            echo "EXE_FILE=$EXE_FILE" >> $GITHUB_ENV
            echo "FILE_SIZE_MB=${file_size_mb}" >> $GITHUB_ENV
            echo "找到的执行文件: $EXE_FILE (${file_size_mb} MB)"
          fi

      - name: 生成发布说明
        run: |
          cat > RELEASE_BODY.md << 'EOF'
          ## 📦 版本 ${{ env.APP_VERSION }} 发布说明
          
          ### ✨ 更新内容
          EOF
          cat CHANGELOG.txt >> RELEASE_BODY.md
          cat >> RELEASE_BODY.md << 'EOF'
          
          ### 📋 版本信息
          - **版本号**: v${{ env.APP_VERSION }}
          - **发布时间**: ${{ github.event.head_commit.timestamp }}
          - **文件大小**: ${{ env.FILE_SIZE_MB }} MB
          - **支持平台**: Windows 10/11 (x64)
          - **提交哈希**: ${{ github.sha }}
          
          ### 🔄 自动更新支持
          - ✅ 支持应用内自动更新
          - ✅ 已自动上传到更新服务器
          - ✅ 用户将收到更新通知
          
          ### 📥 下载说明
          1. 下载下方的 `.exe` 文件
          2. 以管理员权限运行安装程序
          3. 如果已安装旧版本，程序会自动覆盖更新
          
          ### 🛠️ 技术支持
          如果在安装或使用过程中遇到问题，请提交 Issue 或联系开发团队。
          
          ---
          *此版本通过 GitHub Actions 自动构建和发布*
          EOF

      - name: 创建GitHub发布
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.exe"
          tag: v${{ env.APP_VERSION }}
          name: "🚀 v${{ env.APP_VERSION }}"
          bodyFile: "RELEASE_BODY.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          draft: false
          prerelease: false
          generateReleaseNotes: false
          makeLatest: true
